/**
 * Copyright (c) 2011, The University of Southampton and the individual contributors.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 *   * 	Redistributions of source code must retain the above copyright notice,
 * 	this list of conditions and the following disclaimer.
 *
 *   *	Redistributions in binary form must reproduce the above copyright notice,
 * 	this list of conditions and the following disclaimer in the documentation
 * 	and/or other materials provided with the distribution.
 *
 *   *	Neither the name of the University of Southampton nor the names of its
 * 	contributors may be used to endorse or promote products derived from this
 * 	software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package uk.ac.soton.ecs.jsh2

import org.codehaus.gmaven.mojo.GroovyMojo

/**
 * jTemp Maven2 Groovy Mojo.
 *
 * @goal generate
 * @phase generate-sources
 */
class JTempMojo extends GroovyMojo
{
	/**
	 * The project to create a build for.
	 * @parameter expression="${project}"
	 * @required
	 */
	def project = null;
	
	String JTEMP_EXTENSION = ".jtemp"
	String JAVA_EXTENSION = ".java"
	String JTEMP_SOURCES = "jtemp"

	String HEADER = "/*\n\tAUTOMATICALLY GENERATED BY jTemp FROM\n\t%s\n*/\n"

	def WRAPPERS = [
	    new WrapperInfo( "double", "Double" ),
	    new WrapperInfo( "float", "Float" ),
	    new WrapperInfo( "int", "Integer" ),
	    new WrapperInfo( "long", "Long" ),
	    new WrapperInfo( "byte", "Byte" ),
	    new WrapperInfo( "short", "Short" )
	]

	def WRAPPER_MAP = [
	    DOUBLE:WRAPPERS[0],
	    FLOAT:WRAPPERS[1],
	    INT:WRAPPERS[2],
	    LONG:WRAPPERS[3],
	    BYTE:WRAPPERS[4],
	    SHORT:WRAPPERS[5]
	]
	
	
    /**
     * The hello message to display.
     *
     * @parameter expression="${message}" default-value="Hello World"
     */
    String message
    
    void execute() {
		def source_dirs = [new File("${project.basedir}/src/main"), new File("${project.basedir}/src/test")]
		def target_dirs = [new File("${project.basedir}/target/generated-sources"), new File("${project.basedir}/target/generated-test-sources")]
	
        log.info("Executing the jTemp templating engine.")
		for (int i=0; i<source_dirs.size(); i++) {
		    File jtempdir = new File(source_dirs[i], JTEMP_SOURCES)

		    if (jtempdir.exists()) {
		        File javadir = new File(target_dirs[i], JTEMP_SOURCES)

		        jtempdir.eachFileRecurse{
		            if (it.name.endsWith(JTEMP_EXTENSION) && !it.name.startsWith(".")) {
		                apply(it, jtempdir, javadir)
		            }
		        }
		    }
		}
		log.info("Templated code generation complete.")
		
		project.addCompileSourceRoot( target_dirs[0].getAbsolutePath() );
		project.addTestCompileSourceRoot( target_dirs[1].getAbsolutePath() );
    }

	void apply(File jtempfile, File jtempdir, File javadir) {
	    String relDir = jtempfile.toString().replace(jtempdir.toString(), "")

	    String code = jtempfile.text
	    Closure mapperfcn = getMapper(code)
	    List<String> types = getTypes(code) as List
	    if (mapperfcn) code = removeMapper(code)

	    def wc = []
	    types.each { wc << WRAPPERS }
	    def combos = wc.combinations()

	    combos.each { combo ->
	        def map = [:]
	        combo.eachWithIndex { obj, i ->
	            map[types[i]] = obj
	            map[types[i].toUpperCase()] = obj
	        }

	        if (mapperfcn == null || mapperfcn(map)) {
	            String newcode = new String(code)
	            String newrelDir = new String(relDir)

	            types.each {
	                WrapperInfo wi = map[it]

	                newcode = process(newcode, it, wi)
	                newrelDir = process(newrelDir, it, wi)
	            }
	            File javafile = new File(javadir, newrelDir.replace(JTEMP_EXTENSION, JAVA_EXTENSION))
	            javafile.parentFile.mkdirs()
	            javafile.write(String.format(HEADER, jtempfile.toString().replace("\\","/")) + newcode)
	        }
	    }
	}


	Set<String> getTypes(String input) {
	    Set<String> type = new HashSet<String>()
	    def matcher = input =~ "#([A-Z]|[a-z]|[A-Z][A-Z])#"

	    matcher.each {
	        type << it[1].getAt(0).toLowerCase()
	    }

	    return type
	}

	Closure getMapper(String input) {
	    def matcher = input =~ "(?s)/[*]{3}(.*)[*]{3}/"

	    if (matcher) {
	        return compile(matcher[0][1])
	    }
	    return null
	}

	Closure compile(String groovyCode) {
		GroovyShell gs = new GroovyShell(this.getClass().getClassLoader(), new Binding(WRAPPER_MAP))
		return gs.evaluate(groovyCode)
	}

	String removeMapper(String input) {
	    return input.replaceAll("(?s)/[*]{3}.*[*]{3}/[\n]*", "")
	}

	String process(String input, String typechar, WrapperInfo wi) {
	    String lowertypechar = typechar.toLowerCase()
	    String uppertypechar = typechar.toUpperCase()
	    String doubletypechar = uppertypechar + uppertypechar

	    String out = input

	    String t = wi.primitive
	    String TT = wi.class_name
	    String T = shortInt(TT)

	    out = out.replace("#${lowertypechar}#", t)
	    out = out.replace("#${uppertypechar}#", T)
	    out = out.replace("#${doubletypechar}#", TT)

	    return out
	}

	private static String shortInt(String type) {
	    return type.equals("Integer") ? "Int" : type
	}
}
